#!/bin/bash
# setup_remote_backup.sh - aide dans la configuration de rclone pour la sauvegarde automatique dans le cloud.

set -euo pipefail

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' 

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

echo -e "${BLUE}"
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë          Configuration de Sauvegarde Distante Mediasmith     ‚ïë"
echo "‚ïë             Configurer la Sauvegarde Cloud                   ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo -e "${NC}"

# s'assurer que rclone est install√©
check_rclone() {
    if ! command -v rclone &> /dev/null; then
        echo -e "${RED}‚úó rclone n'est pas install√©${NC}"
        echo ""
        echo "Voulez-vous installer rclone maintenant ? (o/n)"
        read -r response
        if [[ "$response" =~ ^[OoYy]$ ]]; then
            install_rclone
        else
            echo -e "${YELLOW}‚ö† Configuration de sauvegarde distante annul√©e. Installez rclone manuellement et relancez ce script.${NC}"
            exit 1
        fi
    else
        echo -e "${GREEN}‚úì rclone est install√©${NC}"
        rclone --version | head -1
    fi
}

# sinon Installer rclone
install_rclone() {
    echo -e "${YELLOW}üì¶ Installation de rclone...${NC}"
    
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if command -v apt-get &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y rclone
        elif command -v yum &> /dev/null; then
            sudo yum install -y rclone
        elif command -v dnf &> /dev/null; then
            sudo dnf install -y rclone
        else
            curl https://rclone.org/install.sh | sudo bash
        fi
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        if command -v brew &> /dev/null; then
            brew install rclone
        else
            curl https://rclone.org/install.sh | sudo bash
        fi
    else
        curl https://rclone.org/install.sh | sudo bash
    fi
    
    if command -v rclone &> /dev/null; then
        echo -e "${GREEN}‚úì rclone install√© avec succ√®s${NC}"
    else
        echo -e "${RED}‚úó √âchec de l'installation de rclone${NC}"
        exit 1
    fi
}

# un menu pour choisir le fournisseur de stockage cloud
show_provider_menu() {
    echo ""
    echo -e "${BLUE}üìÅ Choisissez votre fournisseur de stockage cloud :${NC}"
    echo ""
    echo "1) Google Drive (15GB gratuit)"
    echo "2) Dropbox (2GB gratuit)"
    echo "3) Microsoft OneDrive (5GB gratuit)"
    echo "4) Amazon S3 (n√©cessite un compte AWS)"
    echo "5) Autre (configuration manuelle)"
    echo "6) Ignorer la configuration de sauvegarde distante"
    echo ""
    echo -n "Entrez votre choix (1-6) : "
}

# Configure Google Drive
setup_google_drive() {
    echo -e "${YELLOW}üîß Configuration de Google Drive...${NC}"
    echo ""
    echo "Ceci va ouvrir votre navigateur web pour l'authentification."
    echo "Assurez-vous d'√™tre connect√© au bon compte Google."
    echo ""
    read -p "Appuyez sur Entr√©e pour continuer..."
    
    rclone config create gdrive drive
    
    if rclone listremotes | grep -q "gdrive:"; then
        echo -e "${GREEN}‚úì Google Drive configur√© avec succ√®s${NC}"
        update_config "gdrive:backup"
        test_remote_backup "gdrive"
    else
        echo -e "${RED}‚úó √âchec de la configuration de Google Drive${NC}"
    fi
}

# Configure Dropbox
setup_dropbox() {
    echo -e "${YELLOW}üîß Configuration de Dropbox...${NC}"
    echo ""
    echo "Ceci va ouvrir votre navigateur web pour l'authentification."
    echo ""
    read -p "Appuyez sur Entr√©e pour continuer..."
    
    rclone config create dropbox dropbox
    
    if rclone listremotes | grep -q "dropbox:"; then
        echo -e "${GREEN}‚úì Dropbox configur√© avec succ√®s${NC}"
        update_config "dropbox:backup"
        test_remote_backup "dropbox"
    else
        echo -e "${RED}‚úó √âchec de la configuration de Dropbox${NC}"
    fi
}

# Configure OneDrive
setup_onedrive() {
    echo -e "${YELLOW}üîß Configuration de Microsoft OneDrive...${NC}"
    echo ""
    echo "Ceci va ouvrir votre navigateur web pour l'authentification."
    echo ""
    read -p "Appuyez sur Entr√©e pour continuer..."
    
    rclone config create onedrive onedrive
    
    if rclone listremotes | grep -q "onedrive:"; then
        echo -e "${GREEN}‚úì OneDrive configur√© avec succ√®s${NC}"
        update_config "onedrive:backup"
        test_remote_backup "onedrive"
    else
        echo -e "${RED}‚úó √âchec de la configuration de OneDrive${NC}"
    fi
}

# Configure Amazon S3
setup_amazon_s3() {
    echo -e "${YELLOW}üîß Configuration d'Amazon S3...${NC}"
    echo ""
    echo "Vous aurez besoin de votre ID de cl√© d'acc√®s AWS et de votre cl√© d'acc√®s secr√®te."
    echo "Vous pouvez les trouver dans votre console AWS sous IAM > Utilisateurs."
    echo ""
    read -p "Appuyez sur Entr√©e pour continuer..."
    
    rclone config create s3 s3
    
    if rclone listremotes | grep -q "s3:"; then
        echo -e "${GREEN}‚úì Amazon S3 configur√© avec succ√®s${NC}"
        echo "Entrez le nom de votre bucket S3 pour les sauvegardes :"
        read -r bucket_name
        update_config "s3:$bucket_name/mediasmith-backup"
        test_remote_backup "s3"
    else
        echo -e "${RED}‚úó √âchec de la configuration d'Amazon S3${NC}"
    fi
}

# configuration manuelle
setup_manual() {
    echo -e "${YELLOW}üîß Configuration manuelle...${NC}"
    echo ""
    echo "D√©marrage de la configuration interactive de rclone."
    echo "Suivez les instructions pour configurer votre fournisseur de stockage cloud."
    echo ""
    read -p "Appuyez sur Entr√©e pour continuer..."
    
    rclone config
    
    remotes=$(rclone listremotes)
    if [[ -n "$remotes" ]]; then
        echo -e "${GREEN}‚úì Configuration termin√©e${NC}"
        echo ""
        echo "T√©l√©commandes disponibles :"
        echo "$remotes"
        echo ""
        echo "Entrez le nom de la t√©l√©commande √† utiliser pour les sauvegardes (ex: 'maremote:backup') :"
        read -r remote_path
        update_config "$remote_path"
        remote_name=$(echo "$remote_path" | cut -d':' -f1)
        test_remote_backup "$remote_name"
    else
        echo -e "${RED}‚úó Aucune t√©l√©commande configur√©e${NC}"
    fi
}

# mis a jour du fichier de configuration
update_config() {
    local remote_path="$1"
    local config_file="$PROJECT_ROOT/config/config.cfg"
    
    echo -e "${YELLOW}üìù Mise √† jour de la configuration Mediasmith...${NC}"
    
    if [[ -f "$config_file" ]]; then
        # Backup original config
        cp "$config_file" "$config_file.backup.$(date +%Y%m%d_%H%M%S)"
        
        # mise a jour REMOTE_DIR
        if grep -q "^REMOTE_DIR=" "$config_file"; then
            sed -i "s|^REMOTE_DIR=.*|REMOTE_DIR=\"$remote_path\"|" "$config_file"
        else
            echo "REMOTE_DIR=\"$remote_path\"" >> "$config_file"
        fi
        
        echo -e "${GREEN}‚úì Configuration mise √† jour${NC}"
        echo "  REMOTE_DIR d√©fini sur : $remote_path"
    else
        echo -e "${RED}‚úó Fichier de configuration non trouv√© : $config_file${NC}"
    fi
}

# Test remote backup
test_remote_backup() {
    local remote_name="$1"
    
    echo -e "${YELLOW}üß™ Test de la sauvegarde distante...${NC}"
    
    # Create test file
    local test_file="/tmp/mediasmith_test_$(date +%s).txt"
    echo "Test de sauvegarde distante Mediasmith - $(date)" > "$test_file"
    
    # Test upload
    if rclone copy "$test_file" "$remote_name:mediasmith-test/" 2>/dev/null; then
        echo -e "${GREEN}‚úì Test d'envoi r√©ussi${NC}"
        
        # Test list
        if rclone ls "$remote_name:mediasmith-test/" | grep -q "mediasmith_test"; then
            echo -e "${GREEN}‚úì Test de listage des fichiers r√©ussi${NC}"
            
            # Cleanup
            rclone delete "$remote_name:mediasmith-test/$(basename "$test_file")" 2>/dev/null
            rclone rmdir "$remote_name:mediasmith-test/" 2>/dev/null
            echo -e "${GREEN}‚úì Nettoyage r√©ussi${NC}"
            
            echo ""
            echo -e "${GREEN}üéâ La sauvegarde distante fonctionne correctement !${NC}"
        else
            echo -e "${RED}‚úó √âchec du test de listage des fichiers${NC}"
        fi
    else
        echo -e "${RED}‚úó √âchec du test d'envoi${NC}"
        echo "Veuillez v√©rifier votre configuration distante et r√©essayer."
    fi
    
    rm -f "$test_file"
}

show_usage_examples() {
    echo ""
    echo -e "${BLUE}üìñ Exemples d'Utilisation :${NC}"
    echo ""
    echo "Apr√®s la configuration, la sauvegarde distante fonctionnera automatiquement :"
    echo ""
    echo "# Traiter des fichiers avec sauvegarde automatique"
    echo "./mediasmith.sh files/sample.mp4"
    echo ""
    echo "# V√©rifier le statut de sauvegarde"
    echo "tail -f logs/history.log | grep 'Sauvegarde en cours'"
    echo ""
    echo "# V√©rifier manuellement la sauvegarde cloud"
    echo "rclone ls \$(grep REMOTE_DIR config/config.cfg | cut -d'\"' -f2)/"
    echo ""
    echo "# Surveiller l'utilisation du stockage cloud"
    local remote_name
    if rclone listremotes | head -1 | grep -q ":"; then
        remote_name=$(rclone listremotes | head -1 | tr -d ':')
        echo "rclone about $remote_name:"
    else
        echo "rclone about [votre-t√©l√©commande]:"
    fi
}

main() {
    echo -e "${BLUE}üîç V√©rification des pr√©requis syst√®me...${NC}"
    check_rclone
    
    echo ""
    echo -e "${GREEN}‚úì Pr√©requis syst√®me satisfaits${NC}"
    
    while true; do
        show_provider_menu
        read -r choice
        
        case $choice in
            1)
                setup_google_drive
                break
                ;;
            2)
                setup_dropbox
                break
                ;;
            3)
                setup_onedrive
                break
                ;;
            4)
                setup_amazon_s3
                break
                ;;
            5)
                setup_manual
                break
                ;;
            6)
                echo -e "${YELLOW}‚è≠ Configuration de sauvegarde distante ignor√©e${NC}"
                echo "Vous pouvez relancer ce script plus tard pour configurer la sauvegarde distante."
                exit 0
                ;;
            *)
                echo -e "${RED}Choix invalide. Veuillez entrer 1-6.${NC}"
                ;;
        esac
    done
    
    show_usage_examples
    
    echo ""
    echo -e "${GREEN}üéâ Configuration de sauvegarde distante termin√©e !${NC}"
    echo ""
    echo "Vos fichiers seront maintenant automatiquement sauvegard√©s dans le cloud"
    echo "chaque fois que vous les traiterez avec Mediasmith."
}

main "$@"
