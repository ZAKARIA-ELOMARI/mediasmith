#!/bin/bash
# test_remote_backup.sh - Ce script teste la configuration et la fonctionnalit√© de sauvegarde distante
# pour s'assurer que les fichiers sont correctement synchronis√©s vers le stockage cloud.

set -euo pipefail

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Charger la configuration
if [[ -f "$PROJECT_ROOT/config/config.cfg" ]]; then
    source "$PROJECT_ROOT/config/config.cfg"
else
    echo -e "${RED}‚úó Fichier de configuration introuvable${NC}"
    exit 1
fi

echo -e "${BLUE}"
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë        Suite de Tests de Sauvegarde Distante Mediasmith     ‚ïë"
echo "‚ïë      V√©rifiez votre configuration de sauvegarde cloud       ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo -e "${NC}"

# Test 1: V√©rifier l'installation de rclone
test_rclone_installation() {
    echo -e "${BLUE}üì¶ Test 1: Installation de rclone${NC}"
    
    if command -v rclone &> /dev/null; then
        echo -e "${GREEN}‚úì rclone est install√©${NC}"
        echo "  Version: $(rclone --version | head -1)"
        return 0
    else
        echo -e "${RED}‚úó rclone n'est pas install√©${NC}"
        echo -e "${YELLOW}  Installer avec: curl https://rclone.org/install.sh | sudo bash${NC}"
        return 1
    fi
}

# Test 2: V√©rifier la configuration distante
test_remote_configuration() {
    echo -e "${BLUE}üîß Test 2: Configuration Distante${NC}"
    
    local remotes
    remotes=$(rclone listremotes 2>/dev/null || echo "")
    
    if [[ -n "$remotes" ]]; then
        echo -e "${GREEN}‚úì Distants configur√©s trouv√©s:${NC}"
        echo "$remotes" | sed 's/^/    /'
        return 0
    else
        echo -e "${RED}‚úó Aucun distant configur√©${NC}"
        echo -e "${YELLOW}  Ex√©cuter: ./scripts/setup_remote_backup.sh${NC}"
        return 1
    fi
}

# Test 3: V√©rifier la configuration REMOTE_DIR
test_remote_dir_config() {
    echo -e "${BLUE}‚öôÔ∏è Test 3: Configuration REMOTE_DIR${NC}"
    
    if [[ -n "${REMOTE_DIR:-}" ]]; then
        echo -e "${GREEN}‚úì REMOTE_DIR est configur√©${NC}"
        echo "  REMOTE_DIR: $REMOTE_DIR"
        
        # Extraire le nom du distant
        local remote_name
        remote_name=$(echo "$REMOTE_DIR" | cut -d':' -f1)
        
        # V√©rifier si le distant existe
        if rclone listremotes | grep -q "${remote_name}:"; then
            echo -e "${GREEN}‚úì Le distant '$remote_name' existe${NC}"
            return 0
        else
            echo -e "${RED}‚úó Le distant '$remote_name' introuvable${NC}"
            echo -e "${YELLOW}  Distants disponibles: $(rclone listremotes | tr '\n' ' ')${NC}"
            return 1
        fi
    else
        echo -e "${RED}‚úó REMOTE_DIR non configur√©${NC}"
        echo -e "${YELLOW}  √âditer config/config.cfg et d√©finir REMOTE_DIR${NC}"
        return 1
    fi
}

# Test 4: Tester la connectivit√© distante
test_remote_connectivity() {
    echo -e "${BLUE}üåê Test 4: Connectivit√© Distante${NC}"
    
    if [[ -z "${REMOTE_DIR:-}" ]]; then
        echo -e "${YELLOW}‚è≠ Ignor√© - REMOTE_DIR non configur√©${NC}"
        return 0
    fi
    
    local remote_name
    remote_name=$(echo "$REMOTE_DIR" | cut -d':' -f1)
    
    if rclone about "$remote_name:" &>/dev/null; then
        echo -e "${GREEN}‚úì Connexion distante r√©ussie${NC}"
        
        # Afficher les infos de stockage si disponibles
        local storage_info
        storage_info=$(rclone about "$remote_name:" 2>/dev/null || echo "Informations de stockage non disponibles")
        echo "  Infos de stockage:"
        echo "$storage_info" | head -5 | sed 's/^/    /'
        return 0
    else
        echo -e "${RED}‚úó Impossible de se connecter au distant${NC}"
        echo -e "${YELLOW}  Essayer: rclone config reconnect $remote_name:${NC}"
        return 1
    fi
}

# Test 5: Tester les op√©rations de fichiers
test_file_operations() {
    echo -e "${BLUE}üìÅ Test 5: Op√©rations de Fichiers${NC}"
    
    if [[ -z "${REMOTE_DIR:-}" ]]; then
        echo -e "${YELLOW}‚è≠ Ignor√© - REMOTE_DIR non configur√©${NC}"
        return 0
    fi
    
    # Cr√©er un fichier de test
    local test_file="/tmp/mediasmith_test_$(date +%s).txt"
    local test_content="Test de sauvegarde distante Mediasmith - $(date)"
    echo "$test_content" > "$test_file"
    
    echo "  Cr√©ation du fichier de test: $(basename "$test_file")"
    
    # Tester l'upload
    if rclone copy "$test_file" "$REMOTE_DIR/test/" 2>/dev/null; then
        echo -e "${GREEN}‚úì Upload r√©ussi${NC}"
        
        # Tester la liste
        if rclone ls "$REMOTE_DIR/test/" | grep -q "$(basename "$test_file")"; then
            echo -e "${GREEN}‚úì Liste des fichiers r√©ussie${NC}"
            
            # Tester le download
            local download_file="/tmp/$(basename "$test_file").download"
            if rclone copy "$REMOTE_DIR/test/$(basename "$test_file")" "/tmp/" 2>/dev/null; then
                mv "/tmp/$(basename "$test_file")" "$download_file"
                
                # V√©rifier le contenu
                if diff "$test_file" "$download_file" &>/dev/null; then
                    echo -e "${GREEN}‚úì Download et v√©rification r√©ussis${NC}"
                else
                    echo -e "${RED}‚úó Contenu du fichier diff√©rent${NC}"
                    rm -f "$download_file"
                    return 1
                fi
                rm -f "$download_file"
            else
                echo -e "${RED}‚úó Download √©chou√©${NC}"
                return 1
            fi
            
            # Nettoyage distant
            rclone delete "$REMOTE_DIR/test/$(basename "$test_file")" 2>/dev/null
            rclone rmdir "$REMOTE_DIR/test/" 2>/dev/null
            echo -e "${GREEN}‚úì Nettoyage distant r√©ussi${NC}"
        else
            echo -e "${RED}‚úó Liste des fichiers √©chou√©e${NC}"
            return 1
        fi
    else
        echo -e "${RED}‚úó Upload √©chou√©${NC}"
        return 1
    fi
    
    # Nettoyage local
    rm -f "$test_file"
    return 0
}

# Test 6: Tester l'int√©gration mediasmith
test_mediasmith_integration() {
    echo -e "${BLUE}üîÑ Test 6: Int√©gration Mediasmith${NC}"
    
    if [[ -z "${REMOTE_DIR:-}" ]]; then
        echo -e "${YELLOW}‚è≠ Ignor√© - REMOTE_DIR non configur√©${NC}"
        return 0
    fi
    
    # Cr√©er un fichier m√©dia de test
    local test_media="/tmp/test_media_$(date +%s).txt"
    echo "Contenu m√©dia de test" > "$test_media"
    cp "$test_media" "$PROJECT_ROOT/files/"
    
    echo "  Traitement du fichier de test avec mediasmith..."
    
    # Effacer les logs pr√©c√©dents
    echo "" > "$PROJECT_ROOT/logs/history.log"
    
    # Traiter avec mediasmith
    cd "$PROJECT_ROOT"
    if ./mediasmith.sh "files/$(basename "$test_media")" &>/dev/null; then
        echo -e "${GREEN}‚úì Traitement mediasmith r√©ussi${NC}"
        
        # V√©rifier si la sauvegarde distante a √©t√© tent√©e
        if grep -q "Backing up.*‚Üí.*$REMOTE_DIR" logs/history.log; then
            echo -e "${GREEN}‚úì Int√©gration de sauvegarde distante fonctionnelle${NC}"
            
            # V√©rifier que le fichier a √©t√© upload√©
            sleep 2  # Donner du temps √† rclone pour finir
            local today=$(date +%Y-%m-%d)
            if rclone ls "$REMOTE_DIR/$today/" 2>/dev/null | grep -q "$(basename "$test_media")"; then
                echo -e "${GREEN}‚úì Fichier sauvegard√© avec succ√®s sur le cloud${NC}"
            else
                echo -e "${YELLOW}‚ö† L'upload du fichier peut encore √™tre en cours${NC}"
            fi
        else
            echo -e "${YELLOW}‚ö† Sauvegarde distante non d√©clench√©e${NC}"
            echo "  (Ceci peut √™tre normal si rclone n'est pas disponible pendant le traitement)"
        fi
    else
        echo -e "${RED}‚úó Traitement mediasmith √©chou√©${NC}"
        return 1
    fi
    
    # Nettoyage
    rm -f "$test_media" "$PROJECT_ROOT/files/$(basename "$test_media")"
    return 0
}

# Test 7: Performance et surveillance
test_performance_monitoring() {
    echo -e "${BLUE}üìä Test 7: Performance et Surveillance${NC}"
    
    if [[ -z "${REMOTE_DIR:-}" ]]; then
        echo -e "${YELLOW}‚è≠ Ignor√© - REMOTE_DIR non configur√©${NC}"
        return 0
    fi
    
    local remote_name
    remote_name=$(echo "$REMOTE_DIR" | cut -d':' -f1)
    
    echo "  Distant: $remote_name"
    echo "  Chemin: $REMOTE_DIR"
    
    # V√©rifier les statistiques de transfert
    echo "  Activit√© de sauvegarde r√©cente:"
    if [[ -f "$PROJECT_ROOT/logs/history.log" ]]; then
        local backup_count
        backup_count=$(grep -c "Backing up.*‚Üí.*$REMOTE_DIR" "$PROJECT_ROOT/logs/history.log" 2>/dev/null || echo "0")
        echo "    Tentatives de sauvegarde dans le log actuel: $backup_count"
    fi
    
    # V√©rifier la taille distante
    local remote_size
    remote_size=$(rclone size "$REMOTE_DIR/" 2>/dev/null | grep "Total size:" | awk '{print $3, $4}' || echo "inconnue")
    echo "    Taille de la sauvegarde distante: $remote_size"
    
    # V√©rifier le nombre de fichiers
    local file_count
    file_count=$(rclone ls "$REMOTE_DIR/" 2>/dev/null | wc -l || echo "0")
    echo "    Nombre de fichiers distants: $file_count"
    
    echo -e "${GREEN}‚úì Donn√©es de surveillance de performance collect√©es${NC}"
    return 0
}

# G√©n√©rer le rapport de synth√®se
generate_report() {
    echo ""
    echo -e "${BLUE}üìã Rapport de Synth√®se des Tests${NC}"
    echo "================================"
    echo "Date: $(date)"
    echo "Syst√®me: $(uname -s) $(uname -r)"
    echo "rclone: $(command -v rclone &>/dev/null && rclone --version | head -1 || echo 'Non install√©')"
    echo "REMOTE_DIR: ${REMOTE_DIR:-'Non configur√©'}"
    echo "Distants disponibles: $(rclone listremotes 2>/dev/null | tr '\n' ' ' || echo 'Aucun')"
    echo ""
    
    if [[ $all_tests_passed -eq 1 ]]; then
        echo -e "${GREEN}üéâ Tous les tests sont pass√©s! La sauvegarde distante est pr√™te √† √™tre utilis√©e.${NC}"
        echo ""
        echo "Prochaines √©tapes:"
        echo "  ‚Ä¢ Traiter les fichiers normalement: ./mediasmith.sh files/votre-fichier.mp4"
        echo "  ‚Ä¢ Surveiller les sauvegardes: tail -f logs/history.log | grep 'Backing up'"
        echo "  ‚Ä¢ V√©rifier le stockage cloud: rclone ls $REMOTE_DIR/"
    else
        echo -e "${RED}‚ùå Certains tests ont √©chou√©. Veuillez r√©viser les probl√®mes ci-dessus.${NC}"
        echo ""
        echo "Solutions communes:"
        echo "  ‚Ä¢ Installer rclone: curl https://rclone.org/install.sh | sudo bash"
        echo "  ‚Ä¢ Configurer les distants: ./scripts/setup_remote_backup.sh"
        echo "  ‚Ä¢ V√©rifier la connectivit√©: rclone config reconnect [distant]:"
    fi
    
    echo ""
    echo "Pour le guide de configuration d√©taill√©, voir: REMOTE_BACKUP_GUIDE.md"
}

main() {
    local test_results=()
    all_tests_passed=1
    
    echo "D√©marrage de la suite de tests de sauvegarde distante..."
    echo ""
    
    # Ex√©cuter tous les tests
    if test_rclone_installation; then
        test_results+=("‚úì Installation rclone")
    else
        test_results+=("‚úó Installation rclone")
        all_tests_passed=0
    fi
    echo ""
    
    if test_remote_configuration; then
        test_results+=("‚úì Configuration Distante")
    else
        test_results+=("‚úó Configuration Distante")
        all_tests_passed=0
    fi
    echo ""
    
    if test_remote_dir_config; then
        test_results+=("‚úì Configuration REMOTE_DIR")
    else
        test_results+=("‚úó Configuration REMOTE_DIR")
        all_tests_passed=0
    fi
    echo ""
    
    if test_remote_connectivity; then
        test_results+=("‚úì Connectivit√© Distante")
    else
        test_results+=("‚úó Connectivit√© Distante")
        all_tests_passed=0
    fi
    echo ""
    
    if test_file_operations; then
        test_results+=("‚úì Op√©rations de Fichiers")
    else
        test_results+=("‚úó Op√©rations de Fichiers")
        all_tests_passed=0
    fi
    echo ""
    
    if test_mediasmith_integration; then
        test_results+=("‚úì Int√©gration Mediasmith")
    else
        test_results+=("‚úó Int√©gration Mediasmith")
        all_tests_passed=0
    fi
    echo ""
    
    if test_performance_monitoring; then
        test_results+=("‚úì Surveillance Performance")
    else
        test_results+=("‚úó Surveillance Performance")
        all_tests_passed=0
    fi
    echo ""
    
    generate_report
}

main "$@"
